import requests
import datetime
from config import bot_token, open_weather_token
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor

# frster

bot = Bot(token=bot_token)
dp = Dispatcher(bot)

@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    await message.reply(f'–ü—Ä–∏–≤–µ—Ç –¥—Ä—É–≥ {message.from_user.first_name}! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–≤–æ–µ–≥–æ –≥–æ—Ä–æ–¥–µ –∏ —è –ø—Ä–∏—à–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ!')

@dp.message_handler()
async def get_weather(message: types.Message):
    code_to_smiles = {
        "Clear": "–Ø—Å–Ω–æ \U00002600",
        "Clouds": "–û–±–ª–∞—á–Ω–æ \U00002601",
        "Rain": "–î–æ–∂–¥—å \U00002614",
        "Drizzle": "–î–æ–∂–¥—å \U00002614",
        "Thunderstorm": "–ì—Ä–æ–∑–∞ \U000026A1",
        "Snow": "–°–Ω–µ–≥ \U0001F328",
        "Mist": "–¢—É–º–∞–Ω \U0001F32B"
    }

    try:
        r = requests.get(
            f"https://api.openweathermap.org/data/2.5/weather?q={message.text}&appid={open_weather_token}&units=metric"
        )
        data = r.json()

        city = data["name"]
        cur_weather = data["main"]["temp"]

        weather_descriptuon = data["weather"][0]["main"]
        if weather_descriptuon in code_to_smiles:
            wd = code_to_smiles[weather_descriptuon]
        else:
            wd = "–í—ã–≥–ª—è–Ω–∏ –≤ –æ–∫–Ω–æ –∏ –ø–æ—Å–º–æ—Ç—Ä–∏ –ø–æ–≥–æ–¥—É! –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –∑–∞ –ø–æ–≥–æ–¥–∞!"

        humidity = data["main"]["humidity"]
        pressure = data["main"]["pressure"]
        wind = data["wind"]["speed"]
        sunrise_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunrise"])
        sunset_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunset"])
        length_of_the_day = datetime.datetime.fromtimestamp(data["sys"]["sunset"]) - datetime.datetime.fromtimestamp(data["sys"]["sunrise"])

        await message.reply(  f"***{datetime.datetime.now().strftime('%Y-%m-%d %H:%M')}***\n"
                f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ: {city}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {cur_weather}C¬∞ {wd}\n"
                f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n–î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –º–º.—Ä—Ç.—Å—Ç\n–í–µ—Ç–µ—Ä: {wind} –º/—Å\n"
                f"–í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞: {sunrise_timestamp}\n–ó–∞–∫–∞—Ç —Å–æ–ª–Ω—Ü–∞: {sunset_timestamp}\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è: {length_of_the_day}\n"
                f"–ñ–µ–ª–∞—é —Ö–æ—Ä–æ—à–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å! –§–µ–º–±–æ–π—á–∏–∫‚ò∫"
            )

    except:
        await message.reply("–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≥–æ—Ä–æ–¥!!üò™")

if __name__ == "__main__":
    executor.start_polling(dp)